-- End functionality:
-- input: ring, sequence of integers, and a real number
-- output: multiplier ideal

-- Intermediate functionality (we need):
-- Symbolic power of I.
-- term ideal of the monomial ideal. DONE!
-- some intersection of the lattice points. 

-- This implementation is based on the algorithm given in
-- H.M. Thompson's paper: "Multiplier Ideals of Monomial Space
-- Curves."

restart
installPackage "MonomialMultiplierIdeals"
viewHelp MonomialMultiplierIdeals

R = QQ[x,y];
I = monomialIdeal(y^2,x^3);
monomialMultiplierIdeal(I,5/6)

KK = ZZ/101
R = KK[x,y,z]	    

-- the code for affineMonomialCurveIdeal is based off of the code for
-- monomialCurveideal

affineMonomialCurveIdeal = (S, a) -> (
     -- check that S is a polynomial ring over a field
     n := # a;
     if not all(a, i -> instance(i,ZZ) and i >= 1)
     then error "expected positive integers";
     t := symbol t;
     k := coefficientRing S;
     M1 := monoid [t];
     M2 := monoid [Variables=>n];
     R1 := k M1;
     R2 := k M2;
     t = R1_0;
     mm := matrix table(1, n, (j,i) -> t^(a#i));
     j := generators kernel map(R1, R2, mm);
     ideal substitute(j, submatrix(vars S, {0..n-1}))
     );

nn = {2,3,4}

I = affineMonomialCurveIdeal(R,nn)

     
ord = (mm,p) -> (
     R := ring p;
     KK := coefficientRing R;
     A := KK[gens R,Degrees=>mm];
     min flatten apply(terms p, i -> degree sub(i,A))
     );


sortedff = (R,nn) -> (
     KK := coefficientRing R;
     L := sort apply(flatten entries gens affineMonomialCurveIdeal(R,nn), i -> {ord(nn,i), i});
     apply(L, i-> last i)     
     );

L = sortedff(R,{2,3,4})



--------------HERE

exceptionalDivisorValuation = (nn,mm,p) -> (
     R := ring p;
     ff := sortedff(R,nn);
     n := 0;
     while p % ff_0 == 0 do (p = p//ff_0; n = n+1;);
     n*ord(mm,ff_1) + ord(mm,p)
     );
exceptionalDivisorValuation({3,4,5},{3,4,5},y^2-x*z)

ord({3,4,5},y^2-x*z)


km = (mm,ff) -> sum mm -1 + ord(mm, ff_1) - ord(mm, ff_0);

sortedff(R,nn)

>= floor(t*ord(mm,ff_1)-km(mm,ff))

-- get our hands on G etc

installPackage "Normaliz"


--
-- The code below was copied directy from Zach Teitler's Pacakage
-- MonomialMultiplierIdeas.m2
-- 

intmat2monomIdeal = method();
intmat2monomIdeal ( Matrix, Ring ) := (M,R) -> (
  if ( numColumns M > numgens R ) then (
    error("intmat2monomIdeal: Not enough generators in ring.");
  );
  
  genList := apply( 0..< numRows M ,
                    i -> R_(flatten entries M^{i}) );
  
  return monomialIdeal genList;
);
-- only include rows whose last entry is d; and ignore last column
intmat2monomIdeal ( Matrix, Ring, ZZ ) := (M,R,d) -> intmat2monomIdeal(M,R,d,numColumns(M)-1);
-- only include rows with entry 'd' in column 'c'; and ignore column 'c'
intmat2monomIdeal ( Matrix, Ring, ZZ, ZZ ) := (M,R,d,c) -> (
  if ( numColumns M > 1 + numgens R ) then (
    error("intmat2monomIdeal: Not enough generators in ring.");
  );
  
  rowList := select( 0 ..< numRows M , i -> (M_(i,c) == d) ) ;
  columnList := delete( c , toList(0 ..< numColumns M) );
  
  M1 := submatrix(M,rowList,columnList);
  
  return intmat2monomIdeal(M1,R);
);

--
-- The code above was copied directy from Zach Teitler's Pacakage
-- MonomialMultiplierIdeas.m2
-- 

monomialValuationIdeal = (R,mm,val) -> (
     M := (matrix{mm}|matrix{{-val}}) || id_(ZZ^(#mm+1));
     normalizOutput := normaliz(M,4);
     M2 := normalizOutput#"gen";
     intmat2monomIdeal(M2,R,1)
     );
monomialValuationIdeal(R,{3,4,5},8)



-- note that the term ideal is just the ideal generated by the terms, correct?

nn = {3,4,5}
I = affineMonomialCurveIdeal(R,nn)

termIdeal = I -> monomialIdeal flatten apply(flatten entries gens I, i -> terms i);

termIdeal I

-- here we wish to compute the symbolic power I^(floor t). We'll use
-- the saturate command, but in the future there may be a better
-- option.

symbolicPowerCurveIdeal = (I,t) -> saturate(I^(floor t));






