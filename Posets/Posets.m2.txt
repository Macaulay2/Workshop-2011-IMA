needsPackage("Posets", FileName=>"/home/sturgeon/Posets.m2");
--needsPackage"Posets"

-------------------------------------------------------------------------------------------------------------------------------------------------------------
--Documentation:
--
--Posets entering cellularResolution must be graded (0 to n), since a cellular resolution is based on maps from cell complexes which are graded by the 
--dimmension of the facet. Each face at a particular grade level must have a distinct numerical level (from 0 to #faces-1 of that dimmension). Lastly, the 
--monomial labels of each of the faces must be provided. These three things define a distinct ground set {grade level, numerical label, monomial label}, and 
--allow for easier manipulation when multiply faces have the same monomial label. 
--
--A small example is the 2-dim simplex below resolving the ideal(x_1*x_3,x_1*x_4,x_1*x_5):
--H=poset({{0,0,1},{1,0,x_1*x_3},{1,1,x_1*x_4},{1,2,x_1*x_5},{2,0,x_1*x_3*x_5},{2,1,x_1*x_3*x_4},{2,2,x_1*x_4*x_5},{3,0,x_1*x_3*x_4*x_5}},{({0,0,1},{1,0,x_1*x_3}),({0,0,1},{1,1,x_1*x_4}),({0,0,1},{1,2,x_1*x_5}),({1,0,x_1*x_3},{2,0,x_1*x_3*x_5}),({1,0,x_1*x_3},{2,1,x_1*x_3*x_4}),({1,1,x_1*x_4},{2,1,x_1*x_3*x_4}),({1,1,x_1*x_4},{2,2,x_1*x_4*x_5}),({1,2,x_1*x_5},{2,2,x_1*x_4*x_5}),({1,2,x_1*x_5},{2,0,x_1*x_3*x_5}),({2,1,x_1*x_3*x_4},{3,0,x_1*x_3*x_4*x_5}),({2,0,x_1*x_3*x_5},{3,0,x_1*x_3*x_4*x_5}),({2,2,x_1*x_4*x_5},{3,0,x_1*x_3*x_4*x_5})});
--cellularResolution(H)
--The list returned is the list of matricies that give the maps in the cellular resolution provided by the poset.
--
--A larger example is a cellular resolution of the ideal(x_1*x_3,x_1*x_4,x_1*x_5,x_2*x_4,x_2*x_5,x_3*x_5):
--H={{0,0,1},{1,0,x_1*x_3},{1,1,x_1*x_4},{1,2,x_1*x_5},{1,3,x_2*x_4},{1,4,x_2*x_5},{1,5,x_3*x_5},{2,0,x_1*x_3*x_5},{2,1,x_1*x_3*x_4},{2,2,x_1*x_3*x_5},{2,3,x_2*x_3*x_5},{2,4,x_1*x_4*x_5},{2,5,x_1*x_2*x_5},{2,6,x_2*x_4*x_5},{2,7,x_1*x_2*x_4},{3,0,x_1*x_3*x_4*x_5},{3,1,x_1*x_2*x_4*x_5},{3,2,x_1*x_2*x_3*x_5}};
--bigH = H->(
--	R:={};
--	for i to #H-1 do(
--		for j to #H-1 do(
--			if H_i_0==H_j_0-1 and gcd(H_i_2,H_j_2)==H_i_2 then{
--				if H_i_2!=x_1*x_3*x_5 and H_j_2!=x_1*x_3*x_5 then
--				R=append(R,(H_i,H_j));
--			};
--		);
--	);
--	R=append(R,({1,0,x_1*x_3},{2,0,x_1*x_3*x_5}));
--	R=append(R,({1,2,x_1*x_5},{2,0,x_1*x_3*x_5}));
--	R=append(R,({2,0,x_1*x_3*x_5},{3,0,x_1*x_3*x_4*x_5}));
--	R=append(R,({1,5,x_3*x_5},{2,2,x_1*x_3*x_5}));
--	R=append(R,({1,2,x_1*x_5},{2,2,x_1*x_3*x_5}));
--	R=append(R,({2,2,x_1*x_3*x_5},{3,2,x_1*x_2*x_3*x_5}));
--	poset(H,R)
--);
--cellularResolution(bigH H)
--
--In general cellularResolution will give the maps derived from division of the monomial labels on a poset properly labeled. It does not check to see that the
--poset is properly labeled, nor does it check that the poset actually gives a cellular resolution (i.e. acyclic).
-------------------------------------------------------------------------------------------------------------------------------------------------------------

--Note: Poset must be properly labeled. Ground Set should look like {grade level, numerical label, monomial label}
cellularResolution = method();
cellularResolution (Poset):= P->(
	J:=P.Relations;
	n:=max apply(maximalChains P,c->#c);
	G:=toList(n:toList({}));
	Maps:={};
	for j to n-1 do(
		for i to #P.GroundSet-1 do(
			if P.GroundSet_i_0 == j then{
				G=replace(j,append(G_j,P.GroundSet_i),G);
			};
		);
	);
	sign := new MutableHashTable;
	for i to #G-2 do(
		if i==0 then{
			for j to #G_i-1 do(
				for k to #G_(i+1)-1 do(
					if compare(P,G_i_j,G_(i+1)_k) then sign#(G_i_j,G_(i+1)_k)=1;
				);
			);
		} else{
		for j to #G_i-1 do(				
			for k to #G_(i+1)-1 do(
				if compare(P,G_i_j,G_(i+1)_k) then(
					for p to #G_(i-1)-1 do(
						if compare(P,G_(i-1)_p,G_i_j) then(
							for q to #G_i-1 do(
								if q!=j and compare(P,G_i_q,G_(i+1)_k) and compare(P,G_(i-1)_p,G_i_q) and sign#?(G_i_q,G_(i+1)_k) then(
									sign#(G_i_j,G_(i+1)_k)=-1*sign#(G_i_q,G_(i+1)_k)*sign#(G_(i-1)_p,G_i_q)/sign#(G_(i-1)_p,G_i_j);
								);
							);
						);
					);
					if not sign#?(G_i_j,G_(i+1)_k) then sign#(G_i_j,G_(i+1)_k)=1;
				);
			);
		);
		};
	);
	for i to #G-2 do(
		M:=toList(#G_i:toList(#G_(i+1):0));
		for j to #G_i-1 do(
			for k to #G_(i+1)-1 do(
				if member((G_i_j,G_(i+1)_k),P.Relations) then{
					M=replace(j,replace(k,(sign#(G_i_j,G_(i+1)_k))*G_(i+1)_k_2/G_i_j_2,M_j),M);
				};
			);
		);
		Maps=append(Maps,M);
	);
	Maps
);
-------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------






--These are just my practice posets David.
-------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------


R=QQ[x_1..x_100];
P=poset({x_1,x_2,x_3,x_4},{(x_1,x_2),(x_1,x_3),(x_2,x_4),(x_3,x_4)});
P'=poset({x_1,x_2,x_3,x_4,x_10},{(x_1,x_2),(x_2,x_10),(x_1,x_3),(x_10,x_4),(x_3,x_4)});
Q=poset({x_1,x_2,x_3,x_4,x_5,x_6,x_7,x_8},{(x_1,x_2),(x_1,x_3),(x_2,x_4),(x_3,x_4),(x_5,x_6),(x_6,x_8),(x_7,x_8)});
L=poset({x_5,x_6,x_7,x_8},{(x_5,x_6),(x_6,x_8),(x_7,x_8)});
H={{0,0,1},{1,0,x_1*x_3},{1,1,x_1*x_4},{1,2,x_1*x_5},{1,3,x_2*x_4},{1,4,x_2*x_5},{1,5,x_3*x_5},{2,0,x_1*x_3*x_5},{2,1,x_1*x_3*x_4},{2,2,x_1*x_3*x_5},{2,3,x_2*x_3*x_5},{2,4,x_1*x_4*x_5},{2,5,x_1*x_2*x_5},{2,6,x_2*x_4*x_5},{2,7,x_1*x_2*x_4},{3,0,x_1*x_3*x_4*x_5},{3,1,x_1*x_2*x_4*x_5},{3,2,x_1*x_2*x_3*x_5}};
bigH = H->(
	R:={};
	for i to #H-1 do(
		for j to #H-1 do(
			if H_i_0==H_j_0-1 and gcd(H_i_2,H_j_2)==H_i_2 then{
				if H_i_2!=x_1*x_3*x_5 and H_j_2!=x_1*x_3*x_5 then
				R=append(R,(H_i,H_j));
			};
		);
	);
	R=append(R,({1,0,x_1*x_3},{2,0,x_1*x_3*x_5}));
	R=append(R,({1,2,x_1*x_5},{2,0,x_1*x_3*x_5}));
	R=append(R,({2,0,x_1*x_3*x_5},{3,0,x_1*x_3*x_4*x_5}));
	R=append(R,({1,5,x_3*x_5},{2,2,x_1*x_3*x_5}));
	R=append(R,({1,2,x_1*x_5},{2,2,x_1*x_3*x_5}));
	R=append(R,({2,2,x_1*x_3*x_5},{3,2,x_1*x_2*x_3*x_5}));
	poset(H,R)
);

--H=poset({{0,0,1},{1,0,x_1*x_3},{1,1,x_1*x_4},{1,2,x_1*x_5},{2,0,x_1*x_3*x_5},{2,1,x_1*x_3*x_4},{2,2,x_1*x_4*x_5},{3,0,x_1*x_3*x_4*x_5}},{({0,0,1},{1,0,x_1*x_3}),({0,0,1},{1,1,x_1*x_4}),({0,0,1},{1,2,x_1*x_5}),({1,0,x_1*x_3},{2,0,x_1*x_3*x_5}),({1,0,x_1*x_3},{2,1,x_1*x_3*x_4}),({1,1,x_1*x_4},{2,1,x_1*x_3*x_4}),({1,1,x_1*x_4},{2,2,x_1*x_4*x_5}),({1,2,x_1*x_5},{2,2,x_1*x_4*x_5}),({1,2,x_1*x_5},{2,0,x_1*x_3*x_5}),({2,1,x_1*x_3*x_4},{3,0,x_1*x_3*x_4*x_5}),({2,0,x_1*x_3*x_5},{3,0,x_1*x_3*x_4*x_5}),({2,2,x_1*x_4*x_5},{3,0,x_1*x_3*x_4*x_5})});

