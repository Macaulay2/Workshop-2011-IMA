needsPackage "SimplicialComplexes";

scToString = method();
scToString SimplicialComplex := String => D -> replace("\\}", "]", replace("\\{", "[", toString apply(flatten entries facets D, f -> flatten((support f)/indices))));








R = QQ[v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42];
torsionHeavy = simplicialComplex {v1*v2*v3*v18, v1*v2*v3*v31, v1*v2*v4*v5, v1*v2*v4*v19, v1*v2*v5*v32, v1*v2*v18*v19, v1*v2*v31*v32, v1*v3*v4*v6, v1*v3*v4*v22, v1*v3*v5*v6, v1*v3*v5*v39, v1*v3*v18*v22, v1*v3*v31*v34, v1*v3*v34*v36, v1*v3*v36*v40, v1*v3*v39*v40, v1*v4*v5*v7, v1*v4*v6*v7, v1*v4*v19*v23, v1*v4*v22*v24, v1*v4*v23*v24, v1*v5*v6*v8, v1*v5*v7*v8, v1*v5*v32*v41, v1*v5*v39*v41, v1*v6*v7*v9, v1*v6*v8*v9, v1*v7*v8*v10, v1*v7*v9*v11, v1*v7*v10*v11, v1*v8*v9*v11, v1*v8*v10*v12, v1*v8*v11*v12, v1*v10*v11*v13, v1*v10*v12*v13, v1*v11*v12*v14, v1*v11*v13*v15, v1*v11*v14*v15, v1*v12*v13*v14, v1*v13*v14*v16, v1*v13*v15*v16, v1*v14*v15*v16, v1*v18*v19*v25, v1*v18*v22*v26, v1*v18*v25*v26, v1*v19*v20*v23, v1*v19*v20*v27, v1*v19*v25*v28, v1*v19*v27*v28, v1*v20*v21*v27, v1*v20*v21*v29, v1*v20*v23*v29, v1*v21*v27*v30, v1*v21*v29*v30, v1*v22*v24*v26, v1*v23*v24*v29, v1*v24*v26*v29, v1*v25*v26*v28, v1*v26*v28*v30, v1*v26*v29*v30, v1*v27*v28*v30, v1*v31*v32*v35, v1*v31*v34*v35, v1*v32*v33*v38, v1*v32*v33*v41, v1*v32*v35*v38, v1*v33*v36*v38, v1*v33*v36*v40, v1*v33*v39*v40, v1*v33*v39*v41, v1*v34*v35*v38, v1*v34*v36*v38, v2*v3*v4*v10, v2*v3*v4*v20, v2*v3*v5*v9, v2*v3*v5*v33, v2*v3*v7*v13, v2*v3*v7*v17, v2*v3*v9*v13, v2*v3*v10*v17, v2*v3*v18*v20, v2*v3*v31*v33, v2*v4*v5*v16, v2*v4*v10*v16, v2*v4*v19*v21, v2*v4*v20*v21, v2*v5*v9*v12, v2*v5*v12*v16, v2*v5*v32*v34, v2*v5*v33*v35, v2*v5*v34*v35, v2*v6*v7*v13, v2*v6*v7*v14, v2*v6*v13*v14, v2*v7*v14*v17, v2*v9*v12*v17, v2*v9*v13*v17, v2*v10*v15*v16, v2*v10*v15*v17, v2*v12*v15*v16, v2*v12*v15*v17, v2*v13*v14*v17, v2*v18*v19*v21, v2*v18*v20*v21, v2*v31*v32*v36, v2*v31*v33*v37, v2*v31*v36*v38, v2*v31*v37*v38, v2*v32*v34*v36, v2*v33*v35*v37, v2*v34*v35*v38, v2*v34*v36*v38, v2*v35*v37*v38, v3*v4*v5*v6, v3*v4*v5*v15, v3*v4*v10*v12, v3*v4*v12*v15, v3*v4*v20*v30, v3*v4*v22*v29, v3*v4*v29*v30, v3*v5*v9*v15, v3*v5*v33*v38, v3*v5*v38*v39, v3*v7*v13*v17, v3*v8*v10*v11, v3*v8*v10*v12, v3*v8*v11*v12, v3*v9*v13*v17, v3*v9*v14*v15, v3*v9*v14*v16, v3*v9*v16*v17, v3*v10*v11*v17, v3*v11*v12*v16, v3*v11*v16*v17, v3*v12*v15*v16, v3*v14*v15*v16, v3*v18*v20*v28, v3*v18*v22*v23, v3*v18*v23*v24, v3*v18*v24*v28, v3*v19*v21*v24, v3*v19*v21*v26, v3*v19*v22*v25, v3*v19*v22*v29, v3*v19*v24*v25, v3*v19*v26*v29, v3*v20*v28*v30, v3*v21*v24*v28, v3*v21*v26*v28, v3*v22*v23*v27, v3*v22*v25*v27, v3*v23*v24*v27, v3*v24*v25*v27, v3*v26*v28*v30, v3*v26*v29*v30, v3*v31*v33*v41, v3*v31*v34*v41, v3*v32*v33*v38, v3*v32*v33*v41, v3*v32*v37*v41, v3*v32*v37*v42, v3*v32*v38*v39, v3*v32*v39*v40, v3*v32*v40*v42, v3*v34*v36*v37, v3*v34*v37*v41, v3*v36*v37*v42, v3*v36*v40*v42, v4*v5*v6*v14, v4*v5*v7*v14, v4*v5*v15*v17, v4*v5*v16*v17, v4*v6*v7*v13, v4*v6*v11*v13, v4*v6*v11*v14, v4*v7*v13*v14, v4*v9*v10*v12, v4*v9*v10*v16, v4*v9*v12*v17, v4*v9*v16*v17, v4*v11*v13*v14, v4*v12*v15*v17, v4*v18*v23*v24, v4*v18*v23*v26, v4*v18*v24*v28, v4*v18*v25*v26, v4*v18*v25*v30, v4*v18*v28*v29, v4*v18*v29*v30, v4*v19*v21*v26, v4*v19*v23*v26, v4*v20*v21*v25, v4*v20*v25*v30, v4*v21*v25*v26, v4*v22*v24*v28, v4*v22*v28*v29, v5*v6*v7*v8, v5*v6*v7*v14, v5*v9*v10*v12, v5*v9*v10*v15, v5*v10*v11*v12, v5*v10*v11*v17, v5*v10*v15*v17, v5*v11*v12*v16, v5*v11*v16*v17, v5*v31*v34*v35, v5*v31*v34*v42, v5*v31*v35*v36, v5*v31*v36*v38, v5*v31*v37*v38, v5*v31*v37*v42, v5*v32*v34*v42, v5*v32*v37*v41, v5*v32*v37*v42, v5*v33*v35*v36, v5*v33*v36*v38, v5*v37*v38*v41, v5*v38*v39*v41, v6*v7*v8*v16, v6*v7*v9*v16, v6*v8*v9*v16, v6*v11*v12*v13, v6*v11*v12*v14, v6*v12*v13*v14, v7*v8*v9*v11, v7*v8*v9*v15, v7*v8*v10*v11, v7*v8*v15*v16, v7*v9*v15*v16, v7*v13*v14*v17, v8*v9*v14*v15, v8*v9*v14*v16, v8*v13*v14*v15, v8*v13*v14*v16, v8*v13*v15*v16, v9*v10*v15*v16, v10*v11*v12*v13, v11*v13*v14*v15, v18*v19*v21*v30, v18*v19*v25*v30, v18*v20*v21*v29, v18*v20*v28*v29, v18*v21*v29*v30, v18*v22*v23*v26, v19*v20*v23*v26, v19*v20*v26*v27, v19*v21*v24*v30, v19*v22*v25*v28, v19*v22*v28*v29, v19*v24*v25*v30, v19*v26*v27*v29, v19*v27*v28*v29, v20*v21*v25*v27, v20*v22*v23*v26, v20*v22*v23*v30, v20*v22*v24*v26, v20*v22*v24*v30, v20*v23*v28*v29, v20*v23*v28*v30, v20*v24*v25*v27, v20*v24*v25*v30, v20*v24*v26*v27, v21*v22*v24*v28, v21*v22*v24*v30, v21*v22*v25*v27, v21*v22*v25*v28, v21*v22*v27*v30, v21*v25*v26*v28, v22*v23*v27*v30, v23*v24*v27*v29, v23*v27*v28*v29, v23*v27*v28*v30, v24*v26*v27*v29, v31*v32*v35*v36, v31*v33*v37*v42, v31*v33*v41*v42, v31*v34*v41*v42, v32*v34*v36*v39, v32*v34*v39*v40, v32*v34*v40*v42, v32*v35*v36*v39, v32*v35*v38*v39, v33*v35*v36*v40, v33*v35*v37*v40, v33*v37*v39*v40, v33*v37*v39*v42, v33*v39*v41*v42, v34*v36*v37*v39, v34*v37*v39*v40, v34*v37*v40*v41, v34*v40*v41*v42, v35*v36*v39*v42, v35*v36*v40*v42, v35*v37*v38*v41, v35*v37*v40*v41, v35*v38*v39*v41, v35*v39*v41*v42, v35*v40*v41*v42, v36*v37*v39*v42};

