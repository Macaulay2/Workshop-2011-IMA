A list of activities that are required or at least desirable

* (Mike's machine): make sure Singular and Risa/Asir are running on new rMBP
  and that all PD papers are avialable

* Find best algorithms and ideas for absolute PD

* Get examples into a situation where:
  ** they are easy to run
  ** can run them in other systems too
  ** we can easily tell which ones we need to work on to improve
  We should have one subdir for examples?

* Improve 0-dimensional PD (over a frac field)
  ** use as many tricks as possible to reduce to a case with as small dim over base as possible
    This is perhaps the most interesting part!
  ** possibly use rational function interpolation to find these GB's?

* get all of the code running so it is not in disarray
  i.e, for each function in PD.m2:
  ** make sure we like the interface
  ** document it and examples
  ** write tests for it

* Homework for 2 Oct 2012:
  put in tests for equidimSplit, to make sure that the intersection of ideals
    is equal to the radical
  put in tests for makeFiberRings, minimalizeOverFrac, factors
  Franzi: get siphon examples organized, easy to create examples
  Frank: clean up stewart-eg.m2 file, put into PD directory
  Mike: first stab at 0-dim min primes, also factorization over towers?
  All: try it out on various examples

* 6 Nov 2012 Notes:
  * looked at stewart-gough example that took ~15 (or actually 30) seconds to splitTower.
    Used the rationalReconstruction and modular gcd code to find the factor in ~1 second.
    TODO: This needs to be put into a function for other situations when the dimension
          is small, since ratRecon is slow for large dimension ideals. (i.e. strategy
          option).  The example is in gbRatRecon.m2.
  * Looked at the siphon example, and how the code in FactorizingGB handled the second
    test.  It finishes with that code, but does not with ours.  Noticed simplifyIdeal
    is a bit slow and needs to be sped up.
  * Other things still to do:  equidimSplitOneStep needs work (also a bit slow).
  
* 11 Dec 2012 Notes/Todo:
  * fix equidimSplitOneStep to handle #basevars == 0 case directly and robustly:
    i.e.: makeFiberRings should handle #basevar = 0 (i.e. make sure the Slex.cache has the correct
    ring maps/maps in)
  * fix the bug: UseColon => true.  This is most likely a math bug
  * make a new version of minprimes that carries AnnotatedIdeal's around, doesn't use old simplifyIdeal.
  * let's not forget: IdealSoFar strategy, which we have not considered in our code yet.
  * unify Groebner basis computation under ratrecon so that computations over ZZ/p are also fast.
    two tricks to remember: compute GB of the grevlex and use this to compute GB of lex
                            modular code and reconstruction
                            use homogenization and Hilbert functions
    idea: make these play together

  * how to use AnnotatedIdeals.  first idea: each "node" (AnnotatedIdeal) has
    extra info we have several routines that simplify or split an
    AnnotatedIdeal.  minprimes function will somehow put these together, until
    it can prove that we have all prime ideals, or that we have the final
    answer.
    splitIdeal(AnnotatedIdeal, options)
      ==> (List of completed AnnotatedIdeal's: these are prime, List of AnnotatedIdeal's not known to be prime)

    splitIdeal via: IndependentSets
    splitIdeal via: Factorization
    splitIdeal via: Birational
    splitIdeal via: LinearPolynomials (e.g. like simplifyIdeal)
      splitIdeal(I,Split=> LinearPolynomials) ==> ({}, {annotatedIdeal I})

* 18 Dec 2012 Notes/Todo
   * Implemented splitIdeal strategies for Factorization, and made it work with
     lists of Strategies, rather than a single strategy.
   * Still todo: move independent sets splitting to splitIdeal.
   * Make sure we are using NonzeroDivisors and Inverted elements intelligently and correctly
   * Definitely need to figure out a strategy for applying these strategies. (meta-strategy!)
   * Write a 'getStrategy' routine to determine the next strategy to split wrt.

* 3 Jan 2013 Notes/Todo
   * Need to implement meta-strategies.  Perhaps give an ordering of strategies to give precendence on which to try first.
   * use ideal-so-far
   * find better birational polynomials to split with - make sure the last element in the tuple is 'reasonable'
   * minimalizeOverFrac to handle empty basevars
   * gb rat recon throughout? Engine?
   * trivial cases in splitFunction (zero and unit ideal)
   * SplitTower in annotated ideal
   * Make splitTower work for a list of polynomials, rather than an ideal

* 22 Jan 2013 Notes/Todo
   * Still need to do meta-strategies (see above)
   * trivial cases in splitFunction code.  Also make sure that ann ideals created
     via IndependentSet are handled correctly in other split commands
   * tower splitFunction - this will be two functions, one for building a tower
     and the other for factoring an element over a tower
   * speed up linear splitFunction
   * on line 1400 in UnitTests, examine the redundancy that is popping up and handle
     appropriately (i.e. ideal-so-far)
   * splitFunction based on monomial generators (or other 'small' ideals)
   